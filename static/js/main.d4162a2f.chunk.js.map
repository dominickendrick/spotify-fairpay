{"version":3,"sources":["spotify/utils.ts","spotify/api.ts","spotify/ArtistLists.tsx","spotify/ArtistChart.tsx","spotify/ArtistsData.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["getCryptoSubtle","crypto","window","msCrypto","subtle","webkitSubtle","sha256","s","a","digestOp","digest","name","TextEncoder","encode","Promise","res","rej","oncomplete","e","target","result","onerror","error","onabort","bufferToBase64UrlEncoded","input","ie11SafeInput","Uint8Array","b64Chars","replace","m","urlEncodeB64","btoa","String","fromCharCode","Array","from","makeid","length","characters","charactersLength","i","charAt","Math","floor","random","basename","withTrailingSlash","trailingSlash","location","host","clientId","spotifyAuthDomain","redirectUrl","protocol","loginRedirect","codeVerifier","min","max","ceil","hashed","codeChallenge","state","sessionStorage","setItem","authURL","URL","searchParams","append","href","toString","tokenExchange","params","code","get","code_verifier","getItem","postBody","client_id","grant_type","redirect_uri","console","log","axios","post","qs","stringify","headers","getSessionData","sessionData","JSON","parse","ArtistList","props","artists","listItems","items","map","artist","count","className","src","images","url","alt","popularity","id","popularArtistsData","popArtists","filter","nonPopularArtists","chartData","data","backgroundColor","borderWidth","ArtistChart","ctx","useRef","useState","chart","setChart","useEffect","renderedChartRef","current","Chart","type","datasets","labels","options","legend","fontColor","position","renderChart","update","ref","getTopArtists","setTopArtists","accessToken","access_token","config","Authorization","then","catch","topArtists","recentlyPlayed","artistsWithListeningDuration","listening_duration","getListeningDuration","recentlyPlayedList","artistTrack","find","track","artistItem","duration_ms","round","ArtistsData","Home","onClick","Auth","getToken","ArtistsPage","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAKeA,EAAkB,WAC7B,IAAMC,EAJEC,OAAOD,QAAWC,OAAeC,SAMzC,OAAOF,EAAOG,QAAWH,EAAeI,cAG7BC,EAAM,uCAAG,WAAOC,GAAP,eAAAC,EAAA,yDACdC,EAAgBT,IAAkBU,OACtC,CAAEC,KAAM,YACR,IAAIC,aAAcC,OAAON,KAUtBL,OAAeC,SAbA,yCAcX,IAAIW,SAAQ,SAACC,EAAKC,GACvBP,EAASQ,WAAa,SAACC,GACrBH,EAAIG,EAAEC,OAAOC,SAGfX,EAASY,QAAU,SAACH,GAClBF,EAAIE,EAAEI,QAGRb,EAASc,QAAU,WACjBP,EAAI,yCAxBU,uBA6BPP,EA7BO,mFAAH,sDAmDNe,EAA2B,SAACC,GACvC,IAAMC,EAAgB,IAAIC,WAAWF,GACrC,OArBmB,SAACA,GACpB,IAAMG,EAAwC,CAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IACzE,OAAOH,EAAMI,QAAQ,UAAU,SAACC,GAAD,OAAeF,EAASE,MAmBhDC,CACL7B,OAAO8B,KAAKC,OAAOC,aAAP,MAAAD,OAAM,YAAiBE,MAAMC,KAAKV,QAKvCW,EAAS,SAACC,GAKnB,IAJA,IAAIlB,EAAS,GACTmB,EACF,iEACEC,EAAmBD,EAAWD,OACzBG,EAAI,EAAGA,EAAIH,EAAQG,IAC1BrB,GAAUmB,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAEzD,OAAOpB,GCzEE0B,EAAW,WAAyC,IAAxCC,EAAuC,wDACtDC,EAAgBD,EAAoB,IAAM,GAChD,OAAQ7C,OAAO+C,SAASC,MACtB,IAAK,4BACH,MAAO,mBAAqBF,EAC9B,QACE,MAAO,MAIFG,EAAW,mCACXC,EAAoB,+BAC3BC,EAAW,UAAMnD,OAAO+C,SAASK,SAAtB,aAAmCpD,OAAO+C,SAASC,MAAnD,OAA0DJ,GAAS,GAAnE,iBAIJS,EAAa,uCAAG,oCAAA/C,EAAA,6DAErBgD,EAAenB,GD2DQoB,EC3DY,GD2DCC,EC3DG,ID4D3CD,EAAMd,KAAKgB,KAAKF,GAChBC,EAAMf,KAAKC,MAAMc,GACVf,KAAKC,MAAMD,KAAKE,UAAYa,EAAMD,EAAM,IAAMA,IChE5B,SAGNnD,EAAOkD,GAHD,OAGrBI,EAHqB,OAIrBC,EAAgBrC,EAAyBoC,GACzCE,EAAQzB,EAAO,IAGrB0B,eAAeC,QAAQ,wBAAyBR,GAChDO,eAAeC,QAAQ,gBAAiBF,IAGlCG,EAAU,IAAIC,IAAId,EAAoB,eAEpCe,aAAaC,OAAO,gBAAiB,QAC7CH,EAAQE,aAAaC,OAAO,YAAajB,GACzCc,EAAQE,aAAaC,OAAO,eAAgBf,GAC5CY,EAAQE,aAAaC,OAAO,QApBf,2CAqBbH,EAAQE,aAAaC,OAAO,QAASN,GACrCG,EAAQE,aAAaC,OAAO,iBAAkBP,GAC9CI,EAAQE,aAAaC,OAAO,wBAAyB,QAGrDlE,OAAO+C,SAASoB,KAAOJ,EAAQK,WAvBJ,kCD6DC,IAACb,EAAaC,IC7Df,OAAH,qDA2Bba,EAAa,uCAAG,kCAAA/D,EAAA,6DACrBgE,EAAS,IAAIN,IAAIhE,OAAO+C,SAASoB,MAAMF,aACvCM,EAAOD,EAAOE,IAAI,QAGlBC,EAAgBZ,eAAea,QAAQ,yBAEvCC,EAAW,CACfC,UAAW3B,EACX4B,WAAY,qBACZN,KAAMA,EACNO,aAAc3B,EACdsB,cAAeA,GAGAvB,EAAoB,aAErC6B,QAAQC,IAAI,sBAjBe,kBAkBpBC,IACJC,KAJchC,yCAICiC,IAAGC,UAAUT,GAAW,CACtCU,QAAS,CACP,eAAgB,wCArBK,2CAAH,qDA6BbC,EAAiB,WAC5B,IAAMC,EAAc1B,eAAea,QAAQ,wBAE3C,GAAIa,EACF,IACE,OAAOC,KAAKC,MAAMF,GAClB,MAAOvE,GACP+D,QAAQC,IAAI,+BAAgChE,K,QCjF3C,SAAS0E,EAAWC,GACzB,GAAIA,GAASA,EAAMC,QAAS,CAC1B,IAAMC,EAAYF,EAAMC,QAAQE,MAAMC,KAAI,SAACC,EAAQC,GAAT,OACxC,+BACE,6BAAKA,EAAQ,IACb,6BACE,qBACEC,UAAU,eACVC,IAAKH,EAAOI,OAAO,GAAGC,IACtBC,IAAKN,EAAOvF,SAGhB,6BAAKuF,EAAOvF,OACZ,6BAAKuF,EAAOO,WAAa,GAAK,eAAO,KACrC,6BACCP,EAAOO,WAAa,IACjB,gCACI,mBAAGL,UAAU,aAAa/B,KAAK,sBAA/B,0BACA,mBAAG+B,UAAU,aAAa/B,KAAK,sBAA/B,yBACA,mBAAG+B,UAAU,aAAa/B,KAAK,sBAA/B,iCAhBD6B,EAAOQ,OAuBlB,OACE,kCACE,gCACE,+BACE,mCACA,uBACA,wCACA,qDACA,kDAGJ,gCAAQX,OAIZ,OAAO,uB,qBCtCHY,EAAqB,SAACd,GAC1B,GAAIA,GAASA,EAAMC,QAAS,CAC1B,IAAMc,EAAaf,EAAMC,QAAQE,MAAMa,QAAO,SAACX,GAC7C,OAAOA,EAAOO,WAAa,MAGvBK,EAAoBjB,EAAMC,QAAQE,MAAM1D,OAASsE,EAAWtE,OAClE,MAAO,CAACsE,EAAWtE,OAAQwE,GAE3B,MAAO,CAAC,GAAI,KAIVC,EAAY,SAACJ,GACjB,MAAO,CACLK,KAAML,EAENM,gBAAiB,CAAC,UAAW,WAC7BC,YAAa,IA6BZ,SAASC,EAAYtB,GAC1B,IAAMuB,EAAMC,iBAA0B,MADQ,EAEpBC,qBAFoB,mBAEvCC,EAFuC,KAEhCC,EAFgC,KAoB9C,OAhBAC,qBAAU,WACR,GAAIL,EAAK,CACP,IAAMM,EA/BU,SAClBN,EACAvB,GAEA,GAAIuB,GAAOA,EAAIO,QACb,OAAO,IAAIC,IAAMR,EAAIO,QAAS,CAC5BE,KAAM,WACNb,KAAM,CACJc,SAAU,CAACf,EAAUJ,EAAmBd,KACxCkC,OAAQ,CAAC,iBAAkB,sBAE7BC,QAAS,CACPC,OAAQ,CACNF,OAAQ,CAENG,UAAW,SAEbC,SAAU,aAcSC,CAAYhB,EAAKvB,GACtC6B,GACFF,EAASE,MAGb,CAAC7B,IAEH4B,qBAAU,WACJF,GAASA,EAAMP,MAAQO,EAAMP,KAAKc,WACpCP,EAAMP,KAAKc,SAAS,GAAKf,EAAUJ,EAAmBd,IACtD0B,EAAMc,YAEP,CAACxC,EAAO0B,IAGT,gCACI,uCAAyC,EAA/BZ,EAAmBd,GAAO,GAApC,qDACA,wBAAQyC,IAAKlB,IAEb,iGACA,qDACA,+BACI,2FACA,kFAEJ,qHCqBD,IAAMmB,EAAa,uCAAG,WAAOC,GAAP,yBAAAhI,EAAA,2DACrBiF,EAAcD,KADO,wBAInBiD,EAAchD,EAAYiD,aAC1BC,EAAS,CACbpD,QAAS,CAAEqD,cAAc,UAAD,OAAYH,KANb,SAUStD,IAC/BT,IACC,0EACAiE,GAEDE,MAAK,SAAC9H,GACL,OAAOA,EAAIiG,QAEZ8B,MAAM7D,QAAQC,KAlBQ,cAUnB6D,EAVmB,gBAqBwB5D,IAC9CT,IACC,gEACAiE,GAEDE,MAAK,SAAC9H,GAEL,OADAkE,QAAQC,IAAI,kBAAmBnE,EAAIiG,KAAKhB,OACjCjF,EAAIiG,QAEZ8B,MAAM7D,QAAQC,KA9BQ,cAqBnB8D,EArBmB,OAiCnBC,EAA+BF,EAAW/C,MAAMC,KACpD,SAACC,GAMC,OAJAA,EAAOgD,mBAAqBC,EAC1BjD,EACA8C,GAEK9C,KAIXsC,EAAc,CAAExC,MAAOiD,IA5CE,kBA8ClBD,GA9CkB,4CAAH,sDAmDpBG,EAAuB,SAC3BjD,EACAkD,GAGA,IAAMC,EAA0CD,EAAmBpD,MAAMsD,MACvE,SAACC,GAEC,OAAOA,EAAMA,MAAMzD,QAAQwD,MAAK,SAACE,GAC/B,OAAOA,EAAW9C,KAAOR,EAAOQ,SAMtC,OAAkB,OAAX2C,QAAW,IAAXA,OAAA,EAAAA,EAAaE,MAAME,aACtB9G,KAAK+G,OAAiB,OAAXL,QAAW,IAAXA,OAAA,EAAAA,EAAaE,MAAME,aAAc,IAAO,IACnD,GAKC,SAASE,IAAe,IAAD,EACQrC,mBAAkB,CAAEtB,MAAO,KADnC,mBACrB+C,EADqB,KACTP,EADS,KAO5B,OAJAf,qBAAU,WACRc,EAAcC,KACb,IAGD,sBAAKpC,UAAU,MAAf,UACE,kDACA,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,MAAf,SACE,cAACe,EAAD,CAAarB,QAASiD,MAExB,qBAAK3C,UAAU,MAAf,SACE,cAACR,EAAD,CAAYE,QAASiD,Y,MCnK/B,SAASa,IACP,OACE,yBAASxD,UAAU,MAAnB,SACE,sBAAKA,UAAU,WAAf,UACA,wBAAQA,UAAU,eAClB,8GAIA,6IAIA,8GAIA,wBAAQA,UAAU,eAAeyD,QAAStG,EAA1C,mCASN,SAASuG,IAWP,OAVArC,qBAAU,WAAM,4CACd,sBAAAjH,EAAA,+EACS+D,KADT,4CADc,uBAAC,WAAD,gCAKdwF,GAAWlB,MAAK,SAAC9H,GACfgD,eAAeC,QAAQ,uBAAwB0B,KAAKJ,UAAUvE,EAAIiG,OAClE9G,OAAO+C,SAASoB,KAAhB,UAA0BvB,GAAS,GAAnC,oBAED,IACI,uDAGT,SAASkH,IACR,OAAO,cAACL,EAAD,IAGOM,MAhEf,WACE,OACE,cAAC,IAAD,CAAQnH,SAAUA,GAAS,GAA3B,SACE,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoH,OAAK,EAACC,KAAK,IAAlB,SACE,cAACP,EAAD,MAEF,cAAC,IAAD,CAAOO,KAAK,iBAAZ,SACE,cAACL,EAAD,MAEF,cAAC,IAAD,CAAOK,KAAK,eAAZ,SACE,cAACH,EAAD,cCVGI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d4162a2f.chunk.js","sourcesContent":["export const getCrypto = () => {\n    //ie 11.x uses msCrypto\n    return (window.crypto || (window as any).msCrypto) as Crypto;\n  };\n  \n  export const getCryptoSubtle = () => {\n    const crypto = getCrypto();\n    //safari 10.x uses webkitSubtle\n    return crypto.subtle || (crypto as any).webkitSubtle;\n  };\n  \n  export const sha256 = async (s: string) => {\n    const digestOp: any = getCryptoSubtle().digest(\n      { name: \"SHA-256\" },\n      new TextEncoder().encode(s)\n    );\n  \n    // msCrypto (IE11) uses the old spec, which is not Promise based\n    // https://msdn.microsoft.com/en-us/expression/dn904640(v=vs.71)\n    // Instead of returning a promise, it returns a CryptoOperation\n    // with a result property in it.\n    // As a result, the various events need to be handled in the event that we're\n    // working in IE11 (hence the msCrypto check). These events just call resolve\n    // or reject depending on their intention.\n    if ((window as any).msCrypto) {\n      return new Promise((res, rej) => {\n        digestOp.oncomplete = (e: any) => {\n          res(e.target.result);\n        };\n  \n        digestOp.onerror = (e: ErrorEvent) => {\n          rej(e.error);\n        };\n  \n        digestOp.onabort = () => {\n          rej(\"The digest operation was aborted\");\n        };\n      });\n    }\n  \n    return await digestOp;\n  };\n  \n  const urlEncodeB64 = (input: string) => {\n    const b64Chars: { [index: string]: string } = { \"+\": \"-\", \"/\": \"_\", \"=\": \"\" };\n    return input.replace(/[+/=]/g, (m: string) => b64Chars[m]);\n  };\n  \n  // https://stackoverflow.com/questions/30106476/\n  const decodeB64 = (input: string) =>\n    decodeURIComponent(\n      atob(input)\n        .split(\"\")\n        .map((c) => {\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join(\"\")\n    );\n  \n  export const urlDecodeB64 = (input: string) =>\n    decodeB64(input.replace(/_/g, \"/\").replace(/-/g, \"+\"));\n  \n  export const bufferToBase64UrlEncoded = (input: number[] | Uint8Array) => {\n    const ie11SafeInput = new Uint8Array(input);\n    return urlEncodeB64(\n      window.btoa(String.fromCharCode(...Array.from(ie11SafeInput)))\n    );\n  };\n\n  // helper function to generate a random string\nexport const makeid = (length: number) => {\n    var result = \"\";\n    var characters =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  };\n  \n  // helper function to generate a random number\n  export const getRandomInt = (min: number, max: number) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };","import axios from \"axios\";\nimport qs from \"qs\";\nimport { sha256, bufferToBase64UrlEncoded, getRandomInt, makeid } from \"./utils\"\n\n\nexport const basename = (withTrailingSlash: boolean = false) => {\n    const trailingSlash = withTrailingSlash ? \"/\" : \"\";\n    switch (window.location.host) {\n      case \"dominickendrick.github.io\":\n        return \"/spotify-fairpay\" + trailingSlash;\n      default:\n        return \"/\"\n    }\n  }\n\nexport const clientId = \"ad2aef8b86924e66941a6c4344c4bf8a\";\nexport const spotifyAuthDomain = \"https://accounts.spotify.com\";\nconst redirectUrl = `${window.location.protocol}//${window.location.host}${basename(true)}auth-callback`;\nconst scopes = \"user-read-recently-played user-top-read\";\n\n\nexport const loginRedirect = async () => {\n  // Generate the code verifier and its base 64 encoded hash\n  const codeVerifier = makeid(getRandomInt(43, 128));\n  const hashed = await sha256(codeVerifier);\n  const codeChallenge = bufferToBase64UrlEncoded(hashed);\n  const state = makeid(12);\n\n  // Set the code verifier and state in local storage so we can check it later\n  sessionStorage.setItem(\"spotify-code-verifier\", codeVerifier);\n  sessionStorage.setItem(\"spotify-state\", state);\n\n  // construct the authentication url\n  const authURL = new URL(spotifyAuthDomain + \"/authorize\");\n\n  authURL.searchParams.append(\"response_type\", \"code\");\n  authURL.searchParams.append(\"client_id\", clientId);\n  authURL.searchParams.append(\"redirect_uri\", redirectUrl);\n  authURL.searchParams.append(\"scope\", scopes);\n  authURL.searchParams.append(\"state\", state);\n  authURL.searchParams.append(\"code_challenge\", codeChallenge);\n  authURL.searchParams.append(\"code_challenge_method\", \"S256\");\n\n  // open the spotify authentication page\n  window.location.href = authURL.toString();\n};\n\n\nexport const tokenExchange = async () => {\n  const params = new URL(window.location.href).searchParams;\n  const code = params.get(\"code\");\n  // const state = params.get(\"state\");\n  // TODO: check state\n  const code_verifier = sessionStorage.getItem(\"spotify-code-verifier\");\n\n  const postBody = {\n    client_id: clientId,\n    grant_type: \"authorization_code\",\n    code: code,\n    redirect_uri: redirectUrl,\n    code_verifier: code_verifier,\n  };\n\n  const tokenUrl = spotifyAuthDomain + \"/api/token\";\n\n  console.log(\"token-verification\")\n  return axios\n    .post(tokenUrl, qs.stringify(postBody), {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    })\n\n};\n\n\n\nexport const getSessionData = () => {\n  const sessionData = sessionStorage.getItem(\"spotify-session-data\");\n\n  if (sessionData) {\n    try {\n      return JSON.parse(sessionData);\n    } catch (e) {\n      console.log(\"failed to parse storage data\", e);\n    }\n  }\n};\n","import React from \"react\";\nimport { ArtistProps } from \"./ArtistsData\";\n\nexport function ArtistList(props?: ArtistProps) {\n  if (props && props.artists) {\n    const listItems = props.artists.items.map((artist, count) => (\n      <tr key={artist.id}>\n        <td>{count + 1}</td>\n        <td>\n          <img\n            className=\"circle-image\"\n            src={artist.images[2].url}\n            alt={artist.name}\n          ></img>\n        </td>\n        <td>{artist.name}</td>\n        <td>{artist.popularity < 50 ? \"✔︎\" : \"\"}</td>\n        <td>\n        {artist.popularity < 50  &&\n            <div>\n                <a className=\"actionLink\" href=\"https://artist.site\" >Buy CD/Vinyl</a>\n                <a className=\"actionLink\" href=\"https://artist.site\" >Buy Digital</a>\n                <a className=\"actionLink\" href=\"https://artist.site\" >Join Patreon</a>\n            </div>\n        }\n        </td>\n\n      </tr>\n    ));\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th></th>\n            <th>Artist</th>\n            <th>Specialist musician</th>\n            <th>Take Action</th>\n          </tr>\n        </thead>\n        <tbody>{listItems}</tbody>\n      </table>\n    );\n  } else {\n    return <ul></ul>;\n  }\n}\n","import React, { useRef, useEffect, useState } from \"react\";\nimport Chart, { ChartDataSets } from \"chart.js\";\nimport { ArtistProps, Artist } from \"./ArtistsData\";\n\n// get the number of artists from the users top artists who are popular.\n  // If you have a popularity score over 50, you are popular\n  const popularArtistsData = (props: ArtistProps): Array<number> => {\n    if (props && props.artists) {\n      const popArtists = props.artists.items.filter((artist: Artist) => {\n        return artist.popularity > 50;\n      });\n      // to get nonPopularArtists you minus the popular artists from total top artists\n      const nonPopularArtists = props.artists.items.length - popArtists.length;\n      return [popArtists.length, nonPopularArtists];\n    } else {\n      return [50, 50];\n    }\n  };\n\n  const chartData = (popularArtistsData: Array<number>): ChartDataSets => {\n    return {\n      data: popularArtistsData,\n      //fill: \"none\",\n      backgroundColor: [\"#1db9a4\", \"#1db954\"],\n      borderWidth: 0,\n    };\n  };\n\n  const renderChart = (\n    ctx: React.RefObject<HTMLCanvasElement>,\n    props: ArtistProps\n  ): Chart | undefined => {\n    if (ctx && ctx.current) {\n      return new Chart(ctx.current, {\n        type: \"doughnut\",\n        data: {\n          datasets: [chartData(popularArtistsData(props))],\n          labels: [\"Popular artist\", \"Specialist artist\"],\n        },\n        options: {\n          legend: {\n            labels: {\n              // This more specific font property overrides the global property\n              fontColor: \"white\",\n            },\n            position: \"bottom\",\n          },\n        },\n      });\n    }\n  };\n\n\nexport function ArtistChart(props: ArtistProps) {\n  const ctx = useRef<HTMLCanvasElement>(null);\n  const [chart, setChart] = useState<Chart>();\n\n  useEffect(() => {\n    if (ctx) {\n      const renderedChartRef = renderChart(ctx, props);\n      if (renderedChartRef) {\n        setChart(renderedChartRef);\n      }\n    }\n  },[props]);\n\n  useEffect(() => {\n    if (chart && chart.data && chart.data.datasets) {\n      chart.data.datasets[0] = chartData(popularArtistsData(props));\n      chart.update();\n    }\n  }, [props, chart]);\n\n  return (\n    <div>\n        <h2>Over {popularArtistsData(props)[1] * 2}% of your top 50 artists make specialist music.</h2>\n        <canvas ref={ctx} />\n        \n        <p>Most of these musicians do not recieve enough money from Spotify</p>\n        <p>You should consider:</p>\n        <ol>\n            <li>Buying their music via Bandcamp/iTunes etc or on CD/Vinyl</li>\n            <li>Donating via Patreon or Spotify donate system</li>\n        </ol>\n        <p>You can click the buttons on the table to take action for your favourite artists!</p>       \n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nimport { ArtistList } from \"./ArtistLists\";\nimport { ArtistChart } from \"./ArtistChart\";\n\nimport { getSessionData } from \"./api\";\n\nexport interface ArtistProps {\n  artists: Artists;\n}\n\nexport interface Artists {\n  items: Array<Artist>;\n}\n\nexport interface Artist {\n  external_urls: { spotify: string };\n  followers: {\n    href: string;\n    total: number;\n  };\n  genres: Array<string>;\n  href: string;\n  id: string;\n  images: Array<ArtistImage>;\n  name: string;\n  popularity: number;\n  type: string;\n  uri: string;\n  listening_duration?: number;\n}\n\ninterface ArtistImage {\n  height: number;\n  url: string;\n  width: number;\n}\n\ninterface RecentlyPlayedList {\n  items: Array<RecentlyPlayed>;\n}\n\ninterface RecentlyPlayed {\n  context: {\n    external_urls: {\n      spotify: string;\n    };\n    href: string;\n    type: string;\n    uri: string;\n  };\n  played_at: string;\n  track: {\n    album: {\n      album_type: string;\n      artists: [\n        {\n          external_urls: { spotify: string };\n          href: string;\n          id: string;\n          name: string;\n          type: string;\n          uri: string;\n        }\n      ];\n      available_markets: Array<string>;\n      external_urls: { spotify: string };\n      href: string;\n      id: string;\n      images: Array<string>;\n      name: string;\n      release_date: string;\n      release_date_precision: string;\n      total_tracks: number;\n      type: string;\n      uri: string;\n    };\n    artists: [\n      {\n        external_urls: { spotify: string };\n        href: string;\n        id: string;\n        name: string;\n        type: string;\n        uri: string;\n      }\n    ];\n    available_markets: Array<string>;\n    disc_number: number;\n    duration_ms: number;\n    explicit: false;\n    external_ids: { isrc: string };\n    external_urls: { spotify: string };\n    href: string;\n    id: string;\n    name: string;\n    popularity: number;\n    preview_url: string;\n    track_number: number;\n    type: string;\n    uri: string;\n  };\n}\n\nexport const getTopArtists = async (setTopArtists: any) => {\n  const sessionData = getSessionData();\n\n  if (sessionData) {\n    const accessToken = sessionData.access_token;\n    const config = {\n      headers: { Authorization: `Bearer ${accessToken}` },\n    };\n\n    // get your top artists from the api\n    const topArtists: Artists = await axios\n      .get(\n        \"https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=50\",\n        config\n      )\n      .then((res) => {\n        return res.data;\n      })\n      .catch(console.log);\n\n    // get your most recently played songs\n    const recentlyPlayed: RecentlyPlayedList = await axios\n      .get(\n        \"https://api.spotify.com/v1/me/player/recently-played?limit=50\",\n        config\n      )\n      .then((res) => {\n        console.log(\"recently played\", res.data.items);\n        return res.data;\n      })\n      .catch(console.log);\n\n    //get listening duration from top artists if possible\n    const artistsWithListeningDuration = topArtists.items.map(\n      (artist: Artist) => {\n        //this should be a deep copy\n        artist.listening_duration = getListeningDuration(\n          artist,\n          recentlyPlayed\n        );\n        return artist;\n      }\n    );\n\n    setTopArtists({ items: artistsWithListeningDuration });\n\n    return recentlyPlayed;\n  }\n};\n\n// How much have you listened your top artists recently ?\nconst getListeningDuration = (\n  artist: Artist,\n  recentlyPlayedList: RecentlyPlayedList\n): number | undefined => {\n  //look in recently played tracks list to see if we can find the current artist\n  const artistTrack: RecentlyPlayed | undefined = recentlyPlayedList.items.find(\n    (track: RecentlyPlayed) => {\n      //look in the current tracks artists array to see if the id for this artist is in the track\n      return track.track.artists.find((artistItem) => {\n        return artistItem.id === artist.id;\n      });\n    }\n  );\n  //oops it needs to sum the durations\n  //return the duration in minutes or 0 if no duration is present\n  return artistTrack?.track.duration_ms\n    ? Math.round(artistTrack?.track.duration_ms / 1000 / 60)\n    : 0;\n};\n\n// How popular are the your top artists in terms of listen count on their most popular tracks?\n\nexport function ArtistsData() {\n  const [topArtists, setTopArtists] = useState<Artists>({ items: [] });\n\n  useEffect(() => {\n    getTopArtists(setTopArtists);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Your Top Artists</h1>\n      <div className=\"container\">\n        <div className=\"col\">\n          <ArtistChart artists={topArtists}></ArtistChart>\n        </div>\n        <div className=\"col\">\n          <ArtistList artists={topArtists}></ArtistList>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { loginRedirect, tokenExchange, basename } from \"./spotify/api\";\nimport {\n  ArtistsData\n} from \"./spotify/ArtistsData\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router basename={basename(false)}>\n      <div>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/auth-callback\">\n            <Auth />\n          </Route>\n          <Route path=\"/top-artists\">\n            <ArtistsPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction Home() {\n  return (\n    <section className=\"App\">\n      <div className=\"homepage\">\n      <header className=\"App-header\"></header>\n      <h1>\n        Are you your favourite artists being paid enough for their music on\n        spotify?\n      </h1>\n      <p>\n        More people are listening to music via Spotify, but many musicians are\n        not being paid enough for their work.\n      </p>\n      <p>\n        Check to see if your favourite artists are getting their fair share of\n        money.\n      </p>\n      <button className=\"login-button\" onClick={loginRedirect}>\n        Login to Spotify\n      </button>\n      </div>\n    </section>\n\n  );\n}\n\nfunction Auth() {\n  useEffect(() => {\n    async function getToken() {\n      return tokenExchange();\n    }\n    //once we've got the access token for spotify, we redirect the user to the top artists page\n    getToken().then((res) => {\n      sessionStorage.setItem(\"spotify-session-data\", JSON.stringify(res.data));\n      window.location.href = `${basename(true)}top-artists`;\n    });\n  }, []);\n  return <p>Successfully Logged in</p>;\n}\n\nfunction ArtistsPage() {\n return(<ArtistsData></ArtistsData>)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}